import akka.actor.{Actor, ActorRef, ActorSystem, Props}
import com.softwaremill.macwire.akkasupport._

/**
  * In this example I am constructing actor within actor.
  * SomeActor is created by system but Subordinates are created as children of SomeActor.
  *
  */

trait A
class B
trait C

class Subordinate(a: A, b: B, c: C) extends Actor {
  override def receive: Receive = {
    case m => //println(m)
  }
}

object Subordinate {
  def get(a: A, b: B) = new Subordinate(a, b, new C{})
}

class SomeActor(a: A) extends Actor {

  val b = new B {}

  val subordinates: Seq[ActorRef] = (0 to 2).map { i =>
    //subordinate factory depends on A and B which are in scope
    wireAnonymousActorWith(Subordinate.get _)
  }

  override def receive: Receive = {
    case m => subordinates.foreach(_ ! m)
  }
}

val system = ActorSystem("wireAnonymousActorWithFactory-10-makeActorInActor")
AfterAllTerminate(system)

val a = new A {}

val someActor = system.actorOf(akka.actor.Props(new SomeActor(a)), "bob")

someActor ! "Hey SomeActor"
