import akka.actor.{Actor, ActorSystem, Props}
import com.softwaremill.macwire.akkasupport._

/**
  * In this example I am constructing simple actor with an implicit parameter list.
  */

trait A
trait B
trait C

class SomeActor(a: A, b: B)(implicit c: C)  extends Actor {
  override def receive: Receive = {
    case m => //println(m)
  }
}

object SomeActor {
  def get(a: A)(implicit c: C) = new SomeActor(a, new B{})
}

val system = ActorSystem("wirePropsWithFactory-14-implicitParameters")
AfterAllTerminate(system)

val a = new A {}
implicit val c = new C {}

val props: Props = wirePropsWith(SomeActor.get _)

val someActor = system.actorOf(props, "someActor")

someActor ! "Hey someActor"
